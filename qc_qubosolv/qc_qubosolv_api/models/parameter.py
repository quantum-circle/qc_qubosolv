# coding: utf-8

"""
    qc_qubosolv_api

    main incubator Quantum Annealer (qc_qubosolv).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Parameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tau': 'float',
        'beta': 'float',
        'maximize': 'bool',
        'temp_start': 'float',
        'temp_end': 'float',
        'algorithm': 'str'
    }

    attribute_map = {
        'tau': 'tau',
        'beta': 'beta',
        'maximize': 'maximize',
        'temp_start': 'temp_start',
        'temp_end': 'temp_end',
        'algorithm': 'algorithm'
    }

    def __init__(self, tau=0.099, beta=0.2, maximize=True, temp_start=None, temp_end=0.001, algorithm='sqa'):  # noqa: E501
        """Parameter - a model defined in Swagger"""  # noqa: E501

        self._tau = None
        self._beta = None
        self._maximize = None
        self._temp_start = None
        self._temp_end = None
        self._algorithm = None
        self.discriminator = None

        if tau is not None:
            self.tau = tau
        if beta is not None:
            self.beta = beta
        if maximize is not None:
            self.maximize = maximize
        if temp_start is not None:
            self.temp_start = temp_start
        if temp_end is not None:
            self.temp_end = temp_end
        if algorithm is not None:
            self.algorithm = algorithm

    @property
    def tau(self):
        """Gets the tau of this Parameter.  # noqa: E501


        :return: The tau of this Parameter.  # noqa: E501
        :rtype: float
        """
        return self._tau

    @tau.setter
    def tau(self, tau):
        """Sets the tau of this Parameter.


        :param tau: The tau of this Parameter.  # noqa: E501
        :type: float
        """

        self._tau = tau

    @property
    def beta(self):
        """Gets the beta of this Parameter.  # noqa: E501


        :return: The beta of this Parameter.  # noqa: E501
        :rtype: float
        """
        return self._beta

    @beta.setter
    def beta(self, beta):
        """Sets the beta of this Parameter.


        :param beta: The beta of this Parameter.  # noqa: E501
        :type: float
        """

        self._beta = beta

    @property
    def maximize(self):
        """Gets the maximize of this Parameter.  # noqa: E501


        :return: The maximize of this Parameter.  # noqa: E501
        :rtype: bool
        """
        return self._maximize

    @maximize.setter
    def maximize(self, maximize):
        """Sets the maximize of this Parameter.


        :param maximize: The maximize of this Parameter.  # noqa: E501
        :type: bool
        """

        self._maximize = maximize

    @property
    def temp_start(self):
        """Gets the temp_start of this Parameter.  # noqa: E501


        :return: The temp_start of this Parameter.  # noqa: E501
        :rtype: float
        """
        return self._temp_start

    @temp_start.setter
    def temp_start(self, temp_start):
        """Sets the temp_start of this Parameter.


        :param temp_start: The temp_start of this Parameter.  # noqa: E501
        :type: float
        """

        self._temp_start = temp_start

    @property
    def temp_end(self):
        """Gets the temp_end of this Parameter.  # noqa: E501


        :return: The temp_end of this Parameter.  # noqa: E501
        :rtype: float
        """
        return self._temp_end

    @temp_end.setter
    def temp_end(self, temp_end):
        """Sets the temp_end of this Parameter.


        :param temp_end: The temp_end of this Parameter.  # noqa: E501
        :type: float
        """

        self._temp_end = temp_end

    @property
    def algorithm(self):
        """Gets the algorithm of this Parameter.  # noqa: E501


        :return: The algorithm of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this Parameter.


        :param algorithm: The algorithm of this Parameter.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Parameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Parameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
